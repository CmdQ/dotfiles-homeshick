#!/usr/bin/env bash

# Do we need a subshell in Poetry?
if command -v poetry &>/dev/null && ! { command -v pyenv &>/dev/null && pyenv virtualenv-prefix &>/dev/null ;}; then
	if [[ -z ${VIRTUAL_ENV} && -z ${POETRY_ACTIVE} ]]; then
		poetry run "$0"
		exit $?
	fi
fi


if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test "$(git diff --cached --name-only --diff-filter=A -z "$against" |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi


########## Additional code check linting ##########

# Create temporary directory for manifested staged code...
temp_dir=$(mktemp --directory)
# ... and delete it afterwards
trap 'rm -rf $temp_dir' EXIT

# This collects the shadow file mappings for mypy.
declare -a shadow_mappings

# This collects the files that we're interested in, because
# mypy will also complain about others not staged.
grep_pattern='^'

# Go over all staged files (without deletions).
while read -r file; do
	case "$file" in
		*.py)
			# Create a temporary file...
			tmp=$(mktemp --tmpdir="$temp_dir" --suffix=.py mypy_XXX)

			# ... fill it with the staged contents and run it through all checkers.
			git show ":$file" >"$tmp" \
			&& isort --check - <"$tmp" \
			&& black --stdin-filename "$file" --fast --check - <"$tmp" \
			&& flake8 --stdin-display-name "$file" - <"$tmp" \
			|| exit 1 # Bail out early for any errors.

			# For constructing the mypy command.
			shadow_mappings+=( --shadow-file "$file" "$tmp" )
			# For constructing the grep command on mypy output.
			grep_pattern="${grep_pattern}${file}:\\|^"
			;;
	esac
done <<<"$(git diff --cached --name-only --diff-filter=d)"

if (( ${#shadow_mappings[@]} > 0 )); then
	# We collected files that mypy can process.

	# The pattern still has the last alternative "open", filling something impossible is easiest.
	# With the remaining ^ we get ^\b$ which is impossible to fulfill.
	grep_pattern="${grep_pattern}\\b$"

	# Run mypy and have it "overlay" the stage temp files over the working directory.
	# From these findings filter out anything that doesn't concern any of them.
	mypy_errors=$(mypy --ignore-missing-imports "${shadow_mappings[@]}" . | grep -Hn "$grep_pattern")
	if [[ -n $mypy_errors ]]; then
		echo mypy complains
		echo "$mypy_errors"
		exit 1
	fi
fi


# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached "$against" --
